//
// Generated file, do not edit! Created by opp_msgtool 6.0 from distanceVector.msg.
//

#ifndef __DISTANCEVECTOR_M_H
#define __DISTANCEVECTOR_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

struct DistanceEntry;
class DistanceVector;
/**
 * Struct generated from distanceVector.msg:1 by opp_msgtool.
 */
struct DistanceEntry
{
    DistanceEntry();
    int destination = 0;
    int cost = 0;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const DistanceEntry& a);
void __doUnpacking(omnetpp::cCommBuffer *b, DistanceEntry& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DistanceEntry& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DistanceEntry& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>distanceVector.msg:5</tt> by opp_msgtool.
 * <pre>
 * message DistanceVector
 * {
 *     int senderId;
 *     DistanceEntry entries[];
 * }
 * </pre>
 */
class DistanceVector : public ::omnetpp::cMessage
{
  protected:
    int senderId = 0;
    DistanceEntry *entries = nullptr;
    size_t entries_arraysize = 0;

  private:
    void copy(const DistanceVector& other);

  protected:
    bool operator==(const DistanceVector&) = delete;

  public:
    DistanceVector(const char *name=nullptr, short kind=0);
    DistanceVector(const DistanceVector& other);
    virtual ~DistanceVector();
    DistanceVector& operator=(const DistanceVector& other);
    virtual DistanceVector *dup() const override {return new DistanceVector(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);

    virtual void setEntriesArraySize(size_t size);
    virtual size_t getEntriesArraySize() const;
    virtual const DistanceEntry& getEntries(size_t k) const;
    virtual DistanceEntry& getEntriesForUpdate(size_t k) { return const_cast<DistanceEntry&>(const_cast<DistanceVector*>(this)->getEntries(k));}
    virtual void setEntries(size_t k, const DistanceEntry& entries);
    virtual void insertEntries(size_t k, const DistanceEntry& entries);
    [[deprecated]] void insertEntries(const DistanceEntry& entries) {appendEntries(entries);}
    virtual void appendEntries(const DistanceEntry& entries);
    virtual void eraseEntries(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DistanceVector& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DistanceVector& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const DistanceEntry *p) {return any_ptr(p);}
template<> inline DistanceEntry *fromAnyPtr(any_ptr ptr) { return ptr.get<DistanceEntry>(); }
template<> inline DistanceVector *fromAnyPtr(any_ptr ptr) { return check_and_cast<DistanceVector*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __DISTANCEVECTOR_M_H

